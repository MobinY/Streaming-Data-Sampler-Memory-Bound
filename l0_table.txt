For each problem/paper, figure out what they need. To get failure probability 1/3, they need l0-sampling_k with what delta? What k? Do they really need l0-sampling or did it suffice to have any element of the support? Or did they need another distribution?

euclidean MST [FIS05]: l0_k, k depends on some epsilon (for estimation via sampling)

connectivity [AGM12a]: suppfind_1, delta = .01

k-connectivity [AGM12a]: suppfind_1, says delta = .01 but it seems we need delta = O(1/lg k) (???)

bipartiteness [AGM12a]: suppfind_1, delta = .01

minimum spanning tree [AGM12a]: suppfind_1, delta ~ epsilon/lg(W) where all edge weights are in [W] and we want the approx MST weight up to 1+epsilon

subgraph counting [AGM12b]: (ell_0)_k for k ~ eps^{-2} lg(1/delta), and failure prob. delta

minimum cut [AGM12b]: suppfind_1, uses lg n k-conn. structures (so delta = 1/(lg n lg k)?) for k = O(eps^{-2} lg n)

cut-sparsifier [AGM12b]: same as min cut

spanner computation [AGM12b]: suppfind_k for k = n^{1/t}, for a t-spanner, delta constant

spectral sparsifiers [AGM13]: same as cut-sparsifier

maximal matching [CCHM15]: (ell_0)_k where k is the size of maximum matching

maximum matching [AGM12a]: needs multiple passes

maximum matching [BS15]: (ell_0)_k where k = O(eps^{-2} log n a(G) n / T), here a(G) is the arboricity of G, and T is a threshold of shallow edges

maximum matching [Kon15]: (ell_0)_k where k is matching size 

maximum matching [AKLY16]: (ell_0)_k where k is matching size 

maximum matching [CCE+16]: they describe a subgraph sampling primitive using (ell_0)_1, delta is not explicitly specified

"Given a dynamic graph stream, the behavior of an `l0-sampler algorithm
is defined as follows: It returns FAIL with probability at most delta and otherwise, it returns an edge chosen
uniformly at random amongst the edges that have been inserted and not deleted. If there are no such edges,
the `0-sampler returns NULL." 
(because it's strict turnstile and there is no multiple edges, it is sufficient to maintain a counter to make false positive 0)

maximum matching [AKL17] ??

vertex cover [CCHM15]: same as maximal matching
vertex cover [CCE+ 16]: seems that they use the primative
hitting set [CCE+ 16]
b-matching [CCE+ 16]
disjoint paths [CCE+ 16]
k-colorable subgraph [CCE+ 16]
several other maximum subgraph problems [CCE+ 16]

densest subgraph [BHNT15]: (ell_0)_1, need O_tilde(n) copies. Use bucketing to bring down update time to O_tilde(1)

densest subgraph [MTVV15]: (ell_0)_1 

densest subgraph [EHW16]: (ell_0)_k for k = O_tilde(n) (universe size is {n \choose 2})

vertex and hyperedge connectivity [GMT15]: suppfind_1 with delta=1/poly(n)

graph degeneracy [FT16]: (ell_0)_1 with delta_1=const, delta_2=1/n^{Omeaga(1)}, it uses (eps^{-2} n log n) samplers (n is vertex size) to get (1+eps)-approx degeneracy with fail-prob 1/n^{Omega(1)}
